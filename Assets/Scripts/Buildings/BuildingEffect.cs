//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
/*		TEMPLATE
 * 
 * namespace AssemblyCSharp
{
		public class X : BuildingEffect
		{

		public X() : base(){
			name = "X";
		}

		public X (int x,int y) : base(x,y)
		{
			name = "X";
			//activates.Add("X");
		}
		
		public override void activate(string activator){

		}
		
		public override void destroy(string condition){
		}

		}
}
 * 
 * 
 * 
 * 
 * 
 * 
 */



using System;
using System.Collections.Generic;
using UnityEngine;

namespace AssemblyCSharp
{
		public abstract class BuildingEffect
		{

		public Building building;
		public List<string> activates;
		public Faction faction;
		public string name;

		public BuildingEffect (){
			activates = new List<string>();
			faction = Grid.turnManager.player;
		}
		
		public BuildingEffect (int x,int y)
		{
			makeBuilding(x,y);
			activates = new List<string>();
			faction = Grid.turnManager.player; //assumes the player made the building since that will be true in most cases.
			building.faction = faction;
		}

		public void makeBuilding(int x,int y){
			building = MonoBehaviour.Instantiate(Grid.prefabLoader.building,new Vector3(x,y,0),Quaternion.identity) as Building;
			MonoBehaviour.print ("making building at: "+x+", "+y);
			MonoBehaviour.print (Grid.map.map[x,y]);
			Grid.map.map[x,y].building = building;
			building.tile = Grid.map.map[x,y];
			building.transform.SetParent(Grid.map.transform);
			building.addBuildingEffect(this);
			building.name = name;
			onCreate();
		}

		public bool checkActivate(string activator){
			if (activates.Contains(activator)){
				return true;
			}
			else return false;
		}
		//if the condition is met, activate it.
		public BuildingEffect doActivate(string activator){
			if (checkActivate(activator)){
				activate (activator);
				return this;
			}
			else return null;
		}
		
		//returns the skill if the condition is met whithout activating the skill.
		//this allows for more complex strings given to the activation function.
		public BuildingEffect getIf(string activator){
			if (checkActivate(activator)){
				return this;
			}
			else return null;
		}
		
		public abstract void activate(string activator);

		public abstract void onCreate();
		
		public abstract void destroy(string condition);
		
		//**************************************************************STATIC METHODS**********************************************************************
		
		//activates all given skills with the command.
		public static void activateBuildingEffects(List<BuildingEffect> foundBuildingEffects,string command){
			foreach(BuildingEffect effect in foundBuildingEffects){
				effect.activate(command);
			}
		}
		//activates all skills that have the activator 
		//with the command.
		public static void activateWith(List<BuildingEffect> foundBuildingEffects,string activator,string command){
			foreach(BuildingEffect effect in foundBuildingEffects){
				if (effect.checkActivate(activator)) effect.activate(command);
			}
		}

		}
}

