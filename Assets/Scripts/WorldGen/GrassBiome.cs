//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using AssemblyCSharp;
namespace AssemblyCSharp
{
		public class GrassBiome : Biome
		{
				public GrassBiome (int xcor, int ycor) : base(xcor,ycor)
				{
					type = "grass";
					variance = 10;
					strength = 3;
					falloff = 2f;
				}

				public override void makeFeatures(){
					if (UnityEngine.Random.value < 0.5f) loneHill();
					//if (UnityEngine.Random.value < 0.1f) loneMountain();
					if (UnityEngine.Random.value < 0.1f) mountainRange();
				}

				private void loneHill(){
				Vector2 pos = randomTileInArea();
				Grid.map.map[(int)pos.x,(int)pos.y].MakeHill();
				}

				private void loneMountain(){
					Vector2 pos = randomTileInArea();
					Grid.map.map[(int) pos.x,(int) pos.y].MakeMountain();
				}

				private void mountainRange(){
					double directionBias = 4; //affects how likely the mountain range will favour moving along its direction.
					double closenessBias = .5;
					int size = (int) (UnityEngine.Random.value*5 + 5);
					Vector2 pos = randomTileInArea();
					Vector2 direction = new Vector2((float)UnityEngine.Random.value,(float)UnityEngine.Random.value);
					Tile startTile = Grid.map.map[(int) pos.x,(int) pos.y];
					Vector2 location;
					float value,bestValue;
					Tile bestTile = startTile;
					while (size != 0){
						bestValue = 0;
						foreach(Tile tile in Grid.map.getTilesInRange(startTile.x,startTile.y,TileCosts.Flat,0,size)){
							location = new Vector2((float)tile.x,(float)tile.y);
							value =(float) Math.Pow((double)Vector2.Dot(location,direction),directionBias);
							value /= location.magnitude; //normalize it so it does not change depending on the map position.
							value /= direction.magnitude;
							value /= (float)Math.Pow((Vector2.Distance(pos,location)), closenessBias);
							value *= UnityEngine.Random.value;
							if (!tile.type.Equals("Mountain") && value > bestValue){
								bestValue = value;
								bestTile = tile;
							}
						}
						bestTile.MakeMountain();
						size -= 1;
					}
				}
		}
}

